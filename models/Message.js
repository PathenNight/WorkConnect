const pool = require('../config/db'); // Database connection

class Message {
    constructor(senderID, recipientID, messageContents = "") {
        this.messageID = null; // Will be generated by the database
        this.senderID = senderID;
        this.recipientID = recipientID;
        this.messageContents = messageContents;
        this.timestamp = new Date(); // Automatically set when a message is created
    }

    // Getters and Setters
    getMessageID() {
        return this.messageID;
    }

    setMessageID(messageID) {
        this.messageID = messageID;
    }

    getSenderID() {
        return this.senderID;
    }

    setSenderID(senderID) {
        this.senderID = senderID;
    }

    getRecipientID() {
        return this.recipientID;
    }

    setRecipientID(recipientID) {
        this.recipientID = recipientID;
    }

    getMessageContents() {
        return this.messageContents;
    }

    setMessageContents(messageContents) {
        this.messageContents = messageContents;
    }

    getTimestamp() {
        return this.timestamp;
    }

    setTimestamp(timestamp) {
        this.timestamp = timestamp;
    }

    // --- Database Methods ---

    // Save message to the database
    async save() {
        const sql = `
            INSERT INTO Messages (senderID, recipientID, messageContents, timestamp)
            VALUES (?, ?, ?, ?)
        `;
        const [result] = await pool.query(sql, [this.senderID, this.recipientID, this.messageContents, this.timestamp]);
        this.messageID = result.insertId; // Assign the generated ID
    }

    // Fetch all messages between two users
    static async getMessages(senderID, recipientID) {
        const sql = `
            SELECT * FROM Messages
            WHERE (senderID = ? AND recipientID = ?)
               OR (senderID = ? AND recipientID = ?)
            ORDER BY timestamp ASC
        `;
        const [messages] = await pool.query(sql, [senderID, recipientID, recipientID, senderID]);
        return messages;
    }

    // Delete a message by ID
    static async deleteMessage(messageID) {
        const sql = `DELETE FROM Messages WHERE messageID = ?`;
        await pool.query(sql, [messageID]);
    }
}

module.exports = Message;
